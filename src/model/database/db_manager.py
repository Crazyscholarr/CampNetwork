import asyncio
import json
import random
from typing import List
from tabulate import tabulate
from loguru import logger

from src.model.database.instance import Database
from src.utils.config import get_config
from src.utils.reader import read_private_keys
from src.utils.proxy_parser import Proxy  # ƒê√£ th√™m import


async def show_database_menu():
    while True:
        print("\nT√πy ch·ªçn qu·∫£n l√Ω Database:\n")
        print("[1] üóë  T·∫°o m·ªõi/ƒê·∫∑t l·∫°i Database")
        print("[2] ‚ûï T·∫°o l·∫°i nhi·ªám v·ª• cho c√°c v√≠ ƒë√£ ho√†n th√†nh")
        print("[3] üìä Xem n·ªôi dung Database")
        print("[4] üîÑ T·∫°o l·∫°i nhi·ªám v·ª• cho t·∫•t c·∫£ v√≠")
        print("[5] üìù Th√™m v√≠ m·ªõi v√†o Database")
        print("[6] üëã Tho√°t")
        print()

        try:
            choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-6): ").strip()

            if choice == "1":
                await reset_database()
            elif choice == "2":
                await regenerate_tasks_for_completed()
            elif choice == "3":
                await show_database_contents()
            elif choice == "4":
                await regenerate_tasks_for_all()
            elif choice == "5":
                await add_new_wallets()
            elif choice == "6":
                print("\nTho√°t kh·ªèi qu·∫£n l√Ω database...")
                break
            else:
                logger.error("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn 6.")

        except Exception as e:
            logger.error(f"L·ªói trong qu·∫£n l√Ω database: {e}")
            await asyncio.sleep(1)


async def reset_database():
    """T·∫°o m·ªõi ho·∫∑c ƒë·∫∑t l·∫°i database hi·ªán t·∫°i"""
    print("\n‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu hi·ªán t·∫°i.")
    print("[1] C√≥")
    print("[2] Kh√¥ng")

    confirmation = input("\nNh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-2): ").strip()

    if confirmation != "1":
        logger.info("ƒê√£ h·ªßy thao t√°c ƒë·∫∑t l·∫°i database")
        return

    try:
        db = Database()
        await db.clear_database()
        await db.init_db()

        # T·∫°o nhi·ªám v·ª• cho database m·ªõi
        config = get_config()
        private_keys = read_private_keys("data/private_keys.txt")

        # ƒê·ªçc proxy
        try:
            proxy_objects = Proxy.from_file("data/proxies.txt")
            proxies = [proxy.get_default_format() for proxy in proxy_objects]
            if len(proxies) == 0:
                logger.error("Kh√¥ng t√¨m th·∫•y proxy trong data/proxies.txt")
                return
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i proxy: {e}")
            return

        # Th√™m v√≠ v·ªõi proxy v√† nhi·ªám v·ª•
        for i, private_key in enumerate(private_keys):
            proxy = proxies[i % len(proxies)]

            # T·∫°o danh s√°ch nhi·ªám v·ª• m·ªõi cho t·ª´ng v√≠
            tasks = generate_tasks_from_config(config)

            if not tasks:
                logger.error(
                    f"Kh√¥ng t·∫°o ƒë∆∞·ª£c nhi·ªám v·ª• cho v√≠ {private_key[:4]}...{private_key[-4:]}"
                )
                continue

            await db.add_wallet(
                private_key=private_key,
                proxy=proxy,
                tasks_list=tasks,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            )

        logger.success(
            f"Database ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v√† kh·ªüi t·∫°o v·ªõi {len(private_keys)} v√≠!"
        )

    except Exception as e:
        logger.error(f"L·ªói khi ƒë·∫∑t l·∫°i database: {e}")


def generate_tasks_from_config(config) -> List[str]:
    """T·∫°o danh s√°ch nhi·ªám v·ª• t·ª´ config theo ƒë√∫ng ƒë·ªãnh d·∫°ng nh∆∞ trong start.py"""
    planned_tasks = []

    # L·∫•y danh s√°ch nhi·ªám v·ª• t·ª´ config
    for task_name in config.FLOW.TASKS:
        # Import tasks.py ƒë·ªÉ l·∫•y danh s√°ch nhi·ªám v·ª• c·ª• th·ªÉ
        import tasks

        # L·∫•y danh s√°ch c√°c nhi·ªám v·ª• con cho nhi·ªám v·ª• hi·ªán t·∫°i
        task_list = getattr(tasks, task_name)

        # X·ª≠ l√Ω t·ª´ng nhi·ªám v·ª• con
        for task_item in task_list:
            if isinstance(task_item, list):
                # N·∫øu l√† d·∫°ng [], ch·ªçn ng·∫´u nhi√™n m·ªôt nhi·ªám v·ª•
                selected_task = random.choice(task_item)
                planned_tasks.append(selected_task)
            elif isinstance(task_item, tuple):
                # N·∫øu l√† d·∫°ng (), x√°o tr·ªôn th·ª© t·ª±
                shuffled_tasks = list(task_item)
                random.shuffle(shuffled_tasks)
                planned_tasks.extend(shuffled_tasks)
            else:
                # Nhi·ªám v·ª• th√¥ng th∆∞·ªùng
                planned_tasks.append(task_item)

    logger.info(f"Chu·ªói nhi·ªám v·ª• ƒë√£ t·∫°o: {planned_tasks}")
    return planned_tasks


async def regenerate_tasks_for_completed():
    """T·∫°o l·∫°i nhi·ªám v·ª• cho c√°c v√≠ ƒë√£ ho√†n th√†nh"""
    try:
        db = Database()
        config = get_config()

        # L·∫•y danh s√°ch v√≠ ƒë√£ ho√†n th√†nh
        completed_wallets = await db.get_completed_wallets()

        if not completed_wallets:
            logger.info("Kh√¥ng c√≥ v√≠ n√†o ƒë√£ ho√†n th√†nh")
            return

        print("\n[1] C√≥")
        print("[2] Kh√¥ng")
        confirmation = input(
            "\nThao t√°c n√†y s·∫Ω thay th·∫ø to√†n b·ªô nhi·ªám v·ª• cho c√°c v√≠ ƒë√£ ho√†n th√†nh. Ti·∫øp t·ª•c? (1-2): "
        ).strip()

        if confirmation != "1":
            logger.info("ƒê√£ h·ªßy thao t√°c t·∫°o l·∫°i nhi·ªám v·ª•")
            return

        # T·∫°o l·∫°i nhi·ªám v·ª• cho t·ª´ng v√≠ ƒë√£ ho√†n th√†nh
        for wallet in completed_wallets:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            new_tasks = generate_tasks_from_config(config)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            await db.clear_wallet_tasks(wallet["private_key"])
            await db.add_tasks_to_wallet(wallet["private_key"], new_tasks)

        logger.success(
            f"ƒê√£ t·∫°o l·∫°i nhi·ªám v·ª• cho {len(completed_wallets)} v√≠ ƒë√£ ho√†n th√†nh"
        )

    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o l·∫°i nhi·ªám v·ª•: {e}")


async def regenerate_tasks_for_all():
    """T·∫°o l·∫°i nhi·ªám v·ª• cho t·∫•t c·∫£ v√≠"""
    try:
        db = Database()
        config = get_config()

        # L·∫•y t·∫•t c·∫£ v√≠
        completed_wallets = await db.get_completed_wallets()
        uncompleted_wallets = await db.get_uncompleted_wallets()
        all_wallets = completed_wallets + uncompleted_wallets

        if not all_wallets:
            logger.info("Kh√¥ng c√≥ v√≠ n√†o trong database")
            return

        print("\n[1] C√≥")
        print("[2] Kh√¥ng")
        confirmation = input(
            "\nThao t√°c n√†y s·∫Ω thay th·∫ø to√†n b·ªô nhi·ªám v·ª• cho T·∫§T C·∫¢ v√≠. Ti·∫øp t·ª•c? (1-2): "
        ).strip()

        if confirmation != "1":
            logger.info("ƒê√£ h·ªßy thao t√°c t·∫°o l·∫°i nhi·ªám v·ª•")
            return

        # T·∫°o l·∫°i nhi·ªám v·ª• cho t·ª´ng v√≠
        for wallet in all_wallets:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            new_tasks = generate_tasks_from_config(config)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            await db.clear_wallet_tasks(wallet["private_key"])
            await db.add_tasks_to_wallet(wallet["private_key"], new_tasks)

        logger.success(f"ƒê√£ t·∫°o l·∫°i nhi·ªám v·ª• cho t·∫•t c·∫£ {len(all_wallets)} v√≠")

    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o l·∫°i nhi·ªám v·ª• cho t·∫•t c·∫£ v√≠: {e}")


async def show_database_contents():
    """Hi·ªÉn th·ªã n·ªôi dung database d∆∞·ªõi d·∫°ng b·∫£ng"""
    try:
        db = Database()

        # L·∫•y t·∫•t c·∫£ v√≠
        completed_wallets = await db.get_completed_wallets()
        uncompleted_wallets = await db.get_uncompleted_wallets()
        all_wallets = completed_wallets + uncompleted_wallets

        if not all_wallets:
            logger.info("Database tr·ªëng")
            return

        # Chu·∫©n b·ªã d·ªØ li·ªáu cho b·∫£ng
        table_data = []
        for wallet in all_wallets:
            tasks = (
                json.loads(wallet["tasks"])
                if isinstance(wallet["tasks"], str)
                else wallet["tasks"]
            )

            # Danh s√°ch nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
            completed_tasks = [
                task["name"] for task in tasks if task["status"] == "completed"
            ]
            # Danh s√°ch nhi·ªám v·ª• ƒëang ch·ªù
            pending_tasks = [
                task["name"] for task in tasks if task["status"] == "pending"
            ]

            # R√∫t g·ªçn private key ƒë·ªÉ hi·ªÉn th·ªã
            short_key = f"{wallet['private_key'][:6]}...{wallet['private_key'][-4:]}"

            # R√∫t g·ªçn proxy ƒë·ªÉ hi·ªÉn th·ªã
            proxy = wallet["proxy"]
            if proxy and len(proxy) > 20:
                proxy = f"{proxy[:17]}..."

            table_data.append(
                [
                    short_key,
                    proxy or "Kh√¥ng c√≥ proxy",
                    wallet["status"],
                    f"{len(completed_tasks)}/{len(tasks)}",
                    ", ".join(completed_tasks) or "Kh√¥ng c√≥",
                    ", ".join(pending_tasks) or "Kh√¥ng c√≥",
                ]
            )

        # T·∫°o b·∫£ng
        headers = [
            "V√≠",
            "Proxy",
            "Tr·∫°ng th√°i",
            "Ti·∫øn ƒë·ªô",
            "Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh",
            "Nhi·ªám v·ª• ƒëang ch·ªù",
        ]
        table = tabulate(table_data, headers=headers, tablefmt="grid", stralign="left")

        # Th·ªëng k√™
        total_wallets = len(all_wallets)
        completed_count = len(completed_wallets)
        print(f"\nTh·ªëng k√™ Database:")
        print(f"T·ªïng s·ªë v√≠: {total_wallets}")
        print(f"V√≠ ƒë√£ ho√†n th√†nh: {completed_count}")
        print(f"V√≠ ƒëang ch·ªù: {total_wallets - completed_count}")

        # Hi·ªÉn th·ªã b·∫£ng
        print("\nN·ªôi dung Database:")
        print(table)

    except Exception as e:
        logger.error(f"L·ªói khi hi·ªÉn th·ªã n·ªôi dung database: {e}")


async def add_new_wallets():
    """Th√™m c√°c v√≠ m·ªõi t·ª´ file v√†o database"""
    try:
        db = Database()
        config = get_config()

        # ƒê·ªçc t·∫•t c·∫£ private key t·ª´ file
        private_keys = read_private_keys("data/private_keys.txt")

        # ƒê·ªçc proxy
        try:
            proxy_objects = Proxy.from_file("data/proxies.txt")
            proxies = [proxy.get_default_format() for proxy in proxy_objects]
            if len(proxies) == 0:
                logger.error("Kh√¥ng t√¨m th·∫•y proxy trong data/proxies.txt")
                return
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i proxy: {e}")
            return

        # L·∫•y c√°c v√≠ ƒë√£ c√≥ trong database
        completed_wallets = await db.get_completed_wallets()
        uncompleted_wallets = await db.get_uncompleted_wallets()
        existing_wallets = {
            w["private_key"] for w in (completed_wallets + uncompleted_wallets)
        }

        # T√¨m c√°c v√≠ m·ªõi
        new_wallets = [pk for pk in private_keys if pk not in existing_wallets]

        if not new_wallets:
            logger.info("Kh√¥ng c√≥ v√≠ m·ªõi ƒë·ªÉ th√™m v√†o database")
            return

        print(f"\nT√¨m th·∫•y {len(new_wallets)} v√≠ m·ªõi ƒë·ªÉ th√™m v√†o database")
        print("\n[1] C√≥")
        print("[2] Kh√¥ng")
        confirmation = input("\nB·∫°n c√≥ mu·ªën th√™m c√°c v√≠ n√†y kh√¥ng? (1-2): ").strip()

        if confirmation != "1":
            logger.info("ƒê√£ h·ªßy thao t√°c th√™m v√≠ m·ªõi")
            return

        # Th√™m c√°c v√≠ m·ªõi
        added_count = 0
        for private_key in new_wallets:
            proxy = proxies[added_count % len(proxies)]
            tasks = generate_tasks_from_config(config)

            if not tasks:
                logger.error(
                    f"Kh√¥ng t·∫°o ƒë∆∞·ª£c nhi·ªám v·ª• cho v√≠ {private_key[:4]}...{private_key[-4:]}"
                )
                continue

            await db.add_wallet(
                private_key=private_key,
                proxy=proxy,
                tasks_list=tasks,
            )
            added_count += 1

        logger.success(f"ƒê√£ th√™m th√†nh c√¥ng {added_count} v√≠ m·ªõi v√†o database!")

    except Exception as e:
        logger.error(f"L·ªói khi th√™m v√≠ m·ªõi: {e}")
